{
  "name": "Ml-workflow",
  "tagline": "",
  "body": "# Open Source workflow - ML\r\n\r\nI am writing this to introduce you guys with marklogic workflow process.\r\n\r\n* ##  I am new to team what should I do to get the marklogic setup done?\r\n> First of all welcome to the team, Marklogic has private github repo which is generally shared with globant team working for marklogic.\r\n> I assume you must be having github account with you. (If not do so please register yourself [here](https://github.com)).\r\n> Once you have your account with you share your `username` with your `project / team manager` to get you assigned in marklogic organization. \r\n>\r\n\r\n* ## I can see marklogic organization in my github account. What should be the next step to setup this project on local system.\r\n> * First of all you need to [fork](https://help.github.com/articles/fork-a-repo/) this porject `(marklogic/ opsdirector)` in your github account.\r\n> * Let's say your username is `abc`. Once you are done with forking you will see `opsdirector` in your local account like `abc/opsdirector`.\r\n> * Now start cloning this `abc/opsdirector` on your local system.\r\n> * Once you are done with cloning , go with readme.md of `abc/marklogic`.\r\n\r\n* ## Opsdirector setup is done on my local system, what should steps I should follow before start of actual development.\r\n> * As we are following open source workflow, it means each team member will have opsdirector in their account and then they will start coding into their branch.\r\n> * It might required that you need to keep yourself in sync with other developer.\r\n> * To achieve the same, I would like you to run few commands.\r\n> * run `git remote -v` : this command shows how many remote added.\r\n> * run `git remote add remote_name remote_url` : this commnd will add remote with this `remote_name`.\r\n> * run again `git remote -v`.\r\n\r\n* ## I have setup the marklogic along with the remote of each member in my team. What to do next.?\r\n> * Before start the work for day, we need to run some set of cammand to get the latest changes from remotes.\r\n> * run `git fetch --all`.\r\n> we always make sure that our branch which we are working upon must be rebased on to marklogic develop.\r\n\r\n* ## How would I pull the latest changes of marklogic/develop or any other remote branch into in my current branch.\r\n>  * I assume you have run `git fetch --all` to fetch the changes from all remote.\r\n> * We geneally prefer rebasing the changes whenever we pull the latest changes of any remote into your branch.\r\n> * Lets assume you are working on branch `feature/abc` which is derived from develope branch and you want to merge `marklogic/develop` changes into this branch. So you can rebase it by running some cammand.\r\n> * `git rebase marklogic/develop`.\r\n> * Once you run this command you will be prompted with further option on the terminal or screen.\r\n> * Once you are done with rebase you can check your commits on the top of marklogic/develop. run this command `git log`\r\n\r\n* ## I have completed with my task and I want it push this changes to marklogic/develop. What steps are required for the same?\r\n> * As you know, we are following open source workflow so we will be creating a pull request to merge our changes with marklogic/develop.\r\n> * `git status`\r\n> * `git add filename or git add .` if there are some untracked changes needs to be committed.\r\n> * `git commit -m 'message'`.\r\n> * `git rebase -i marklogic/develop`. Here you will be asked to pick and squash some commit. We genereally keeps the first commint and squash rest commit to make it one commit.\r\n> * Read [this](http://eli.thegreenplace.net/2014/02/19/squashing-github-pull-requests-into-a-single-commit) for better understanding.\r\n> * once you are done with this, create a pull request on github with marklogic/develop.\r\n\r\n* ## Now my PR is merged into marklogic/develop, what step should I follow ?\r\n> Once your **PR** is in marklogic/develop, delete your branch and pull the latest marklogic/develop into your develop branch.\r\n\r\n* ## Quick Commands at glance:-\r\n> * `git status`\r\n> * `git add file-name ` or `git add .` if any unstage changes.\r\n> * `git commit -m 'message'`\r\n> * `git fetch --all` If remote has changes then follow below step.\r\n> * `git rebase -i marklogic/develop`.\r\n> * squash commit and make it single.\r\n> * `git log` to check the history.\r\n> * `git push remote-name branch-name`. ",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}